<h1>About</h1>
<p>網頁: <span class="text-bold"><a class="Link--inTextBlock" href="https://41223136.github.io/wcm2024/">https://41223136.github.io/wcm2024/</a></span></p>
<p>網誌: <a href="https://41223136.github.io/wcm2024/blog">https://41223136.github.io/wcm2024/blog</a></p>
<p>簡報: <a href="https://41223136.github.io/wcm2024/reveal">https://41223136.github.io/wcm2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/41223136/wcm2024">https://github.com/41223136/wcm2024</a></p>
<p></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<h1>Homework</h1>
<h2>w2</h2>
<p>在使用replit 近端或遠端，編輯維護網站，可用新的維護網站Codespaces進行維護</p>
<p>1.可以跳過近端反鎖步驟，直接開啟動態網站編輯。</p>
<p>2.幾乎與replit的操作系統一樣。(和其最近更新的動態網站連結亂碼)</p>
<p>3.受限於這個只是給你試用的，所以有<span style="background-color: #ffff00;">每個月的使用時數上限</span>。</p>
<p>以下連結為使用<span style="background-color: #ffff00;">Codespaces</span>編輯維護晚站後的靜態連結</p>
<p><a href="https://41223136,github.io/wcm2024">https://41223136.github.io/wcm2024</a></p>
<h2>w3</h2>
<p>上課內容：</p>
<p>1.wink的使用方法</p>
<p>2.使用git常用指令</p>
<p>3.另用指令分組網站成員倉儲分組子模組</p>
<h3>wink</h3>
<p>以下網址為wink的安裝地方</p>
<p><a href="https://www.debugmode.com/wink.html">https://www.debugmode.com/wink.html</a></p>
<h3>git order</h3>
<p><span style="background-color: #ffff00;">git add .</span> (新增)</p>
<p><span style="background-color: #ffff00;">git commit -m "說明字串"</span>  (提交及名稱)</p>
<p><span style="background-color: #ffff00;">git </span><span><span style="background-color: #ffff00;">push</span> (推送)</span></p>
<p><span><span style="background-color: #ffff00;">git version</span> (查詢目前所使用的 git 版本)</span></p>
<p><span><span style="background-color: #ffff00;">git status</span> (一般是用來檢查目前近端改版情況)</span></p>
<p>若在遠端倉儲已經改版了，就必須先<span><span style="background-color: #ffff00;">git pull</span>，將遠端資訊與自己的合併更新，才能在提交新的版本推送至倉儲。</span></p>
<p><span>git pull=git fetch + git merge</span></p>
<p><span><span style="background-color: #ffff00;">git submodule add</span> 倉儲網址子目錄</span></p>
<p><span><span style="background-color: #ffff00;">git clone --recurse-submodules</span> (.git 指定目錄與否)</span></p>
<p><span style="background-color: #ffff00;">token</span></p>
<p><span style="background-color: #ffff00;">git config --global</span></p>
<p>------------------------</p>
<p>以下為其他其他指令</p>
<p><span style="background-color: #00ff00;">git submodule update --init (抓下子模組)</span></p>
<p><span style="background-color: #00ff00;">git log (檢視 Git 紀錄 Q鍵離開)</span></p>
<p><span style="background-color: #00ff00;">ls -l (瀏覽)</span></p>
<p><span style="background-color: #00ff00;">pwd (列出現在工作目錄)</span></p>
<p><span style="background-color: #00ff00;">acp ("輸入" 直接上傳)</span></p>
<p><span style="background-color: #00ff00;">dns (將英文名稱轉為數字IP 問server(伺服器)IP地址 DNS會先查詢自己資料庫)</span></p>
<p><span style="background-color: #00ff00;">dir (顯示某個磁碟指定目錄下的全部或部分檔案目錄和子目錄)</span></p>
<p><span style="background-color: #00ff00;">./b(代表執行、運行)(執行可執行檔)</span></p>
<h3>建立分組倉儲</h3>
<p>利用Codespaces建立分組倉儲建立個人子模組</p>
<p>另用終端機打出指令</p>
<p><span style="background-color: #ffff00;">git status</span></p>
<p><span style="background-color: #ffff00;">ls -l</span></p>
<p><span style="background-color: #ffff00;">clear</span></p>
<p><span style="background-color: #ffff00;">git submodule add 自己倉儲網址.git空格+學號</span></p>
<p><span style="background-color: #ffff00;">git add .</span></p>
<p><span style="background-color: #ffff00;">git commit -m "add 學號 submodule"</span></p>
<p><span style="background-color: #ffff00;">git push</span></p>
<p>就可以將自己的個人子模組加入到分組倉儲</p>
<h2>w4</h2>
<h2>w6</h2>
<p>將下面題目解答並放入自己的網站上</p>
<p>1.根據您的專業, 就 git 的使用, 從與 ChatGPT 的對話, 將內容整理到個人的第六網誌, 其中包含: git 的發展歷史, 創作人的相關履歷, 以及一般相同專業人士如何利用  git 解決內容管理問題?</p>
<p>2.<span><span class="ui-provider sy vy vz wa wb wc wd we wf wg wh wi wj wk wl wm wn wo wp wq wr ws wt wu wv ww wx wy wz xa xb xc xd xe xf" dir="ltr">假如要在 Windows 實際 demo git client 與 git server, 該如何進行? 請將相關操作流程整理至個人第六週網誌中.</span></span></p>
<p></p>
<p></p>
<h3>git的基本用法:</h3>
<p>git是一個分散式版本控制系統，廣泛用於協作開發和版本管理。</p>
<p>如何配置git?</p>
<p>配置git，包括設置使用者名稱和郵箱地址。可使用命令配置</p>
<p><span style="background-color: #ffff00;">git config --global user.name "Your name"</span></p>
<p><span style="background-color: #ffff00;">git config --global user.email "your.email@example.com"</span></p>
<p>初始化倉庫:</p>
<p>要開新專案時，需要初始化一個git倉庫，可透過指令配置</p>
<p><span style="background-color: #ffff00;">git init</span></p>
<p>提交更改:</p>
<p>增加了檔案需提交這些更改來保存它們的狀態</p>
<p><span style="background-color: #ffff00;">git commit -m "Your commit message"</span></p>
<p>增加檔案:</p>
<p>可以用<span style="background-color: #ffff00;">git add .</span>指令</p>
<p>查看狀態:</p>
<p>可以使用<span style="background-color: #ffff00;">git status</span>指令來查看倉儲當前狀態，包括已修改、已暫存何未追蹤的檔案</p>
<p>查看歷史紀錄:</p>
<p>可使用<span style="background-color: #ffff00;">git log</span>指令查看提交歷史，包括提交作者、日期和提交訊息等資訊。</p>
<p>建立分支:</p>
<p>使用分支可以方便在不影響主線開發的情況下進行實驗和開發。可使用指令來創建分支</p>
<p><span style="background-color: #ffff00;">git brash &lt;branch_name&gt;</span></p>
<p>如果要<span style="color: #ff0000;">切換分支</span>可以用<span style="background-color: #ffff00;">git checkout &lt;branch_name&gt;</span></p>
<p><span style="color: #ff0000;">合併分支<span style="color: #000000;">則是</span></span><span style="background-color: #ffff00;">git merge &lt;branch_name&gt;</span></p>
<p>遠程操作:</p>
<p>git支持源成倉儲進行交互，可以通過添加遠程倉儲地址來實現</p>
<p><span style="background-color: #ffff00;">git remote add origin &lt;remote_repository_URL&gt;</span></p>
<p>提交操作:</p>
<p>可以利用<span style="background-color: #ffff00;">git push</span>推送到倉儲</p>
<p>使用<span style="background-color: #ffff00;">git pull</span>從遠程倉儲拉取更改到最新版本</p>
<p></p>
<h3>git的發展歷史</h3>
<p>git是由Linus Torvalds在2005年開發的分散式版本系統</p>
<p>1.2005年git誕生:開發者在Linux內核開發過程中遇到了對版本控制系統的需求，由於對當時版本控制系統不滿意，他決定開發全新的版本控制系統，這就是git。</p>
<p>2.2005年4月:git首次公開發布。</p>
<p>3.2005年6月:<span style="color: #ff0000;">Linux內核項目轉向git進行版本控制</span>，<span style="color: #ff0000;">這是git發展歷史上的一個重要轉折點</span>，也是git得到廣泛認可的開始。</p>
<p>4.2007年Github成立，他是一個基於git的程式碼託管平台，成立於2007年，為開發者提供了一個便捷的程式碼託管、協作開發的平台，推動了git的普及和發展。</p>
<p>5.2008年git1.5.6發布，引進一些重要的功能和改進，使git更加穩定和易用。</p>
<p>6.2016年<span style="color: #ff0000;">Microsoft收購Github</span>，推動了git在開發者社區的地位，並加速Github平台發展。</p>
<p>7.2020年git2.28發布，帶來新功能和改進，包括<span style="color: #ff0000;">增強子模組支持、改進的性能和穩定性</span>等。</p>
<p>8.2020年Github推出Codespaces和Discussions，為開發者提供更多便利和交流機會。</p>
<p>9.2020年Github宣布支持密碼存儲庫存儲，支持私人存儲庫存在冷藏狀態，以解決長期存儲和備份的問題。</p>
<h3>創作人的相關履歷</h3>
<p>Linus Torvalds是git的創辦人之一</p>
<p>本名:<span>Linus Benedict Torvalds</span></p>
<p>出生日期:<span>1969年12月28日</span></p>
<p>出生地:<span>芬蘭赫爾辛基</span></p>
<p>教育背景:</p>
<p>1988年，進入芬蘭赫爾辛基大學就讀，主修計算機科學。</p>
<p>1996年，獲得赫爾辛基大學計算機科學學士學位。</p>
<p>職業生涯</p>
<p>1991年，創建了 Linux 操作系統核心，並開始在全球範圍內發佈。</p>
<p>2005年，開始開發 git 分散式版本控制系統，並於同年向社區發佈。</p>
<p>除了 Linux 和 git 之外，他還參與了許多開源項目的開發和管理，並在計算機科學研究領域發表了許多論文。</p>
<p>獎項和榮譽</p>
<p>1997年，獲得愛因斯坦獎。</p>
<p>1998年，獲得 Free Software Foundation 授予的 Free Software Award。</p>
<p>2010年，獲得 Millennium Technology Prize。</p>
<p>2012年，獲得共享獎。</p>
<p>2014年，獲得亞瑟·克拉克獎。</p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr">一般相同專業人士如何利用  git 解決內容管理問題?</span></span></p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr">1.<span style="color: #ff0000;">版本控制</span></span></span></p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr">git 可以追蹤文件的變更歷史，可讓專業人士可以輕鬆地管理文件的不同版本，對於軟體開發者來說尤其重要，他們可以隨時回溯到過去的版本，比較不同版本之間的差異，甚至回滾到較早的版本。對於文檔編輯和內容創作也非常有用，可以追蹤編輯歷史並輕鬆地合併不同版本的變更。</span></span></p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr">2.<span style="color: #ff0000;">協作開發</span></span></span></p>
<p><span>git 支持多人同時協作開發，多個開發者可以在不同的分支上進行工作，並通過合併操作將自己的工作合併到主分支中。這使得團隊成員可以同時進行工作，而不會互相干擾，從而提高了開發效率。</span></p>
<p><span>3.<span style="color: #ff0000;">分支管理</span></span></p>
<p><span>git 的分支功能非常強大，可以讓專業人士輕鬆地創建、切換和合併分支。這使得專業人士可以方便地在不影響主要開發流程的情況下進行實驗、修復錯誤或者開發新的功能。</span></p>
<p><span>4.<span style="color: #ff0000;">代碼審查</span></span></p>
<p><span>git 支持代碼審查功能，開發者可以通過發送合併請求（Pull Request）的方式將自己的代碼提交給其他成員進行審查。這有助於提高代碼質量、發現潛在的問題和增進團隊之間的溝通。</span></p>
<p><span>5.<span style="color: #ff0000;">文檔管理</span></span></p>
<p><span>git 可以作為一個強大的工具。專業人士可以使用 git 來追蹤文檔的修改歷史，並通過分支和合併操作來管理不同版本的文檔。這使得團隊成員可以輕鬆地協作編輯文檔，同時保持文檔的統一性和準確性。</span></p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr">假如要在 Windows 實際 demo git client 與 git server, 該如何進行?</span></span></p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr">配置git使用者資訊:</span></span></p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr">打開命令(CMDorPowerShell)，並輸入命令配置</span></span></p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr"><span style="background-color: #ffff00;">git config --global user.name "Your Name"</span><br/><span style="background-color: #ffff00;">git config --global user.email "your.email@example.com"</span><br/></span></span></p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr">建立本地git倉庫:</span></span></p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr">輸入<span style="background-color: #ffff00;">git init</span>指令<br/></span></span></p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr">建立檔案並提交更改:</span></span></p>
<p><span><span class="ui-provider td uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd" dir="ltr">可使用<span style="background-color: #ffff00;">git add .</span>添加到暫存區，再提交這些更改到倉庫中<span style="background-color: #ffff00;">git commit -m "Initial commit</span>"<br/></span></span></p>
<p>設置git伺服器:</p>
<p><span>在 Windows 上搭建 git 伺服器可以使用軟體如 GitLab、Gitea 或者搭建裸倉庫。</span></p>
<p>選擇一個合適文件夾作為git伺服器的存儲目錄。可使用<span style="background-color: #ffff00;">git init --bare</span>指令執行</p>
<p>連結git客戶端和伺服器:</p>
<p>增加遠程倉庫地址輸入指令<span style="background-color: #ffff00;">git remote add origin &lt;server_address&gt;/&lt;repo_name&gt;.git</span></p>
<p>其中<span style="color: #ff0000;">&lt;server_address&gt;是你git伺服器地址</span>，<span style="color: #ff0000;">&lt;repo_name&gt;是你在伺服器上創建的倉庫名稱</span>。</p>
<p>將本地倉庫的內容推送到git伺服器上:</p>
<p>使用指令<span style="background-color: #ffff00;">git push -u origin master</span>即可</p>
<p>在使用<span style="background-color: #ffff00;">git pull</span>拉取伺服器上的更改</p>
<h2>w7-w8</h2>
<p>期中成績登記，並輸入自己想要的理想分數。</p>
<p>第八週上課內容</p>
<p>1.了解教育的本質、意義</p>
<p>2.如何把影片嵌入自己的個人網站上</p>
<p></p>
<h2>w9</h2>
<h2>w10</h2>
<p>在mdewcm2024/1astud-site新增各組的心得，並解決衝突的問題</p>
<p>並使用超文件到網誌中</p>
<p>介紹acp的功用</p>
<p><span style="color: #000000; background-color: #ffff00;">git add .</span></p>
<p><span style="color: #000000; background-color: #ffff00;">git commit -m "$1" --author="$2"</span></p>
<p><span style="color: #000000; background-color: #ffff00;">git push</span></p>
<p><span style="color: #000000; background-color: #ffff00;"> </span></p>
<h2>w13</h2>
<p>利用<a href="https://mde.tw/wcm2024/downloads/wsgi_v2_py.txt">wsgi_v2_py</a>擷取個學期的課表</p>
<p>一年級上學期的課表</p>
<p>將上方的連結下載後放入可攜，儲存後放入cmd</p>
<p>要先確認是否有flask和flask-cors</p>
<p>輸入</p>
<p><span style="background-color: #ffff00;">pip list</span></p>
<p><span style="background-color: #ffff00;"><span style="background-color: #ffffff;">如果有就可執行下面內容</span><br/></span></p>
<p><span style="background-color: #ffff00;">cd tmp</span></p>
<p><span style="background-color: #ffff00;">python wsgi_v2.py</span></p>
<p>即可開啟班級課表</p>
<p><img alt="" height="321" src="/images/螢幕擷取畫面 2024-05-16 105431.png" width="400"/></p>
<p><img alt="" height="98" src="/images/螢幕擷取畫面 2024-05-16 105633.png" width="400"/></p>
<p>112年第1學期</p>
<p><img alt="" height="28" src="/images/第一學期課表" width="400"/></p>
<p><img alt="" height="400" src="/images/1121學期課表" width="355"/></p>
<p>112年第2學期課表</p>
<p><img alt="" height="30" src="/images/1122" width="400"/></p>
<p><img alt="" height="400" src="/images/1122課表" width="401"/></p>
<p>102年第1學期</p>
<p><img alt="" height="49" src="/images/1021網誌" width="400"/></p>
<p><img alt="" height="400" src="/images/1021課表" width="406"/></p>
<h2>w14</h2>
<p>了解有關可攜 Python版本，版本是非常重要的，可以透過兩個指令是在哪一個環境</p>
<p><span style="background-color: #ffff00;">path</span></p>
<p><span style="background-color: #ffff99;">set</span></p>
<p>set通常都是windows的內容，如果需要改變的話，要修改。</p>
<p>如果版本不對就ˋ無法開啟。</p>
<h1>期中課程整理</h1>
<h2>網頁式內容管理</h2>
<p>Q1:如何建立 Github 上的網站?Q2:如何管理內容?Q3: 如何建立章節式網站?Q4:能放入甚麼多媒體內容?Q5:靜態圖文?Q6:動態圖文?Q7:線上遊戲?Q8:3D 零組件展示?Q9:如何建立網頁系統中的網誌?Q10:如何建立網頁系統中的簡報?</p>
<p>A1:<span> GitHub 上建立網站可以使用 GitHub Pages ，先創立一個儲存庫，名稱為username.github.io，在存儲庫中創建一個名為「index.html」的 HTML 文件，用於構建你的網站主頁。將網站的代碼添加到 index.html 文件中，然後把它推到 GitHub 存儲庫。</span></p>
<p><span>A2: GitHub 上管理網站內容通常使用版本控制工具 Git。可以在本地創建一個 Git 存儲庫，將網站代碼下載到本地，然後在本地修改和更新網站內容。完成修改後，使用 Git 將更改推送到 GitHub 存儲庫。另外，可以使用分支（Branches）來開發新功能或進行實驗，然後將分支合併（Merge）到主分支（通常是 master 或 main）中。</span></p>
<p><span>A3:建立章節式網站可以使用靜態網站生成器，如Replit、Codespaces或Gitpods等。首先，需要選擇一個適合你需求的生成器，然後在本地開發環境中創建你的網站再使用生成器提供的模板和功能來創建不同的章節和內容頁面，組織你的網站內容。完成編輯後，使用生成器將網站生成為靜態文件，然後將這些文件推送到GitHub存儲庫中。最後，你的章節式網站將通過GitHub Pages或其他靜態網站托管服務進行部署，讓其他人可以訪問和瀏覽你的網站。</span></p>
<p><span>A4:</span></p>
<p><span>1.圖片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。</span></p>
<p><span>2.影片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。</span></p>
<p>3.音頻:<span>嵌入音樂或語音文件，如Podcast等，讓讀者可以聆聽音頻內容。</span></p>
<p><span>4.地圖:嵌入地圖服務，如Google Maps，以展示地理位置或路線信息。</span></p>
<p><span>5.表格:使用HTML或Markdown格式來創建和展示表格內容，以整理和呈現數據。</span></p>
<p><span>6.圖表和圖形:使用JavaScript圖表庫或其他數據可視化工具來創建和展示圖表和圖形，以呈現數據和統計信息。</span></p>
<p><span>7.放入網站:嵌入其他網站提供的媒體內容，如Twitter貼文、Instagram照片等，以擴展你的內容範圍。</span></p>
<p><span>A5:</span></p>
<p><span>1.圖片:將圖片文件直接插入到章節內容中。你可以使用HTML的 <code>&lt;img&gt;</code> 標籤或Markdown的圖片語法（例如 <code>![圖片描述](圖片URL)</code>）來添加圖片。</span></p>
<p><span>2.文本:使用Markdown或HTML來編寫文本內容，包括標題、段落、列表等。Markdown提供了簡單易讀的語法，而HTML則提供更多的自定義和控制。</span></p>
<p><span>3.超連結:使用超連結來連接不同章節或其他網站。在HTML中，你可以使用 <code>&lt;a&gt;</code> 標籤來創建超連結，而Markdown則提供了 <code>[連結文字](連結URL)</code> 的語法。</span></p>
<p><span>4.引用:引用其他資料或文字也是常見的做法。你可以使用Markdown的引用語法（<code>&gt; 引用文字</code>）或HTML的 <code>&lt;blockquote&gt;</code> 標籤來添加引用內容。</span></p>
<p><span>A6:</span></p>
<p><span>1.動畫:使用CSS或JavaScript來創建和控制動畫效果，使圖片、文本或其他元素呈現動態效果。你可以使用CSS的 <code>@keyframes</code> 樣式或JavaScript的動畫庫（如Animate.css）來添加動畫。</span></p>
<p><span>2.交互式元素:加入JavaScript互動元素，例如按鈕、滑塊、表單等，讓用戶可以與你的網站互動。這些元素可以通過事件監聽器來實現動態效果，例如點擊按鈕後顯示或隱藏特定內容。</span></p>
<p><span>3.即時更新:用JavaScript或AJAX來實現即時更新功能，例如在不刷新整個頁面的情況下加載新的內容或更新現有內容。這可以通過向後端API發送請求並處理返回的數據來實現。</span></p>
<p><span>4.影片和音頻播放器:嵌入視頻和音頻播放器，讓用戶可以播放多媒體內容。你可以使用HTML5的 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 標籤來添加視頻和音頻播放器，並使用JavaScript控制播放器的功能。</span></p>
<p><span>5.即時更新圖表:使用JavaScript圖表庫（如Chart.js、D3.js等）來創建動態圖表，並實現即時更新功能，使圖表可以根據用戶操作或數據變化而動態更新。</span></p>
<p><span>A7:</span></p>
<p><span>1.使用嵌入式代碼:將線上遊戲的嵌入代碼（embed code）添加到你的網站中。許多線上遊戲提供了嵌入代碼，你只需將其添加到網站的HTML中的相應位置即可。</span></p>
<p><span>2.使用iframe元素:使用HTML的 <code>&lt;iframe&gt;</code> 元素來嵌入線上遊戲。你可以將遊戲的URL添加到 <code>&lt;iframe&gt;</code> 元素的 <code>src</code> 屬性中，然後將 <code>&lt;iframe&gt;</code> 元素添加到你的網站中的任何位置。</span></p>
<p><span><span style="background-color: #ffff00;">補充</span>:</span><code>&lt;iframe&gt;</code> 元素是HTML中的一個標記，用於在網頁中嵌入另一個獨立的HTML文檔或外部網頁。它提供了一種在當前網頁中包含其他網頁內容的方法，讓你可以將其他網站的內容嵌入到網頁中，或者在同一網站中的不同頁面之間嵌入內容。</p>
<p><code>&lt;iframe&gt;</code> 元素有一個 <code>src</code> 屬性，用於指定要嵌入的外部文檔或網頁的URL。除此之外，還可以設置其他屬性來調整iframe的大小、邊框、樣式等。通過iframe，你可以在網頁中創建內嵌的互動元素，如Google地圖、YouTube視頻、線上遊戲等，為網站提供更豐富的內容和功能。</p>
<p><span>3.設置遊戲頁面:在網站中創建一個專門的遊戲頁面，將遊戲嵌入到該頁面中。這樣做可以使遊戲與網站的其他內容分開，並為用戶提供更好的遊戲體驗。</span></p>
<p><span>4.安全性:確保嵌入的遊戲代碼來源可信，以防止可能的安全風險。如果可能的話，最好使用來自可靠和信任的遊戲提供商的嵌入代碼。</span></p>
<p><span>A8:</span></p>
<p><span>1.使用Javascript 3D庫:使用像Three.js這樣的JavaScript 3D庫，可以輕鬆在網站中展示3D零組件。你可以將3D模型導入到你的網站中，並使用Three.js等庫來渲染和顯示它們。這樣的庫通常提供了各種功能，如照明、動畫、交互等，以增強3D模型的表現力。</span></p>
<p><span>2.使用網頁GL視窗:利用WebGL技術，你可以在網頁中嵌入可交互的3D場景。這需要一些較高級的編程知識，但它可以讓你在網頁中直接渲染3D模型，使它們能夠與用戶互動。</span></p>
<p><span>3.嵌入式3D查看器:使用嵌入式3D查看器，如Sketchfab，可以將3D模型嵌入到你的網站中。Sketchfab提供了一個簡單的嵌入代碼，你可以將它添加到你的網站中，以便在線上展示和互動3D模型。</span></p>
<p><span>A9:步驟</span></p>
<p><span>1.選擇網誌平台</span></p>
<p><span>2.設置網誌</span></p>
<p><span>3.編輯內容</span></p>
<p><span>4.發布文章</span></p>
<p><span>5.促進網誌</span></p>
<p><span>6.定期更新</span></p>
<p><span>A10:步驟</span></p>
<p><span>1.選擇簡報工具</span></p>
<p><span>2.建立簡報</span></p>
<p><span>3.增加內容</span></p>
<p><span>4.設置轉場效果</span></p>
<p><span>5.編輯和分享</span></p>
<p><span>6.儲存</span></p>
<p><span></span></p>
<p><span></span></p>
<h2>Python 程式系統</h2>
<p>學習議題: 如何利用電腦輔助設計室的舊 Python 建立新的可攜環境? 在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域? (精密)機械設計流程? 設計運算? 特定系統模擬?</p>
<h2>網頁上的 IDE</h2>
<p>IDE 是甚麼? 可以將 Replit、Codespaces 與 Gitpod 當成 IDE 用來開發各種程式嗎? 與近端操作系統上的開發有何不同? 多人協同? 這樣安全嗎?</p>
<p>學習議題: 學會使用網頁上的各種 IDE 之後, 有沒有甚麼感想或心得?</p>
<h2>AI 工具</h2>
<p>ChatGPT 與 Gemini Pro 都可以直接利用 Gmail 帳號登入, 初級應用目前都可免費使用, 這兩個 AI 工具可以協助我們解決甚麼問題? 為什麼有人驚這些工具為天人? 有人卻覺得還好而已, 並無法從中挖出甚麼資料?</p>
<p>學習議題: AI 工具曾經協助我們解決甚麼問題?</p>
<h2>實作練習問題</h2>
<h1>期末專案</h1>
<p>在做專案的過程中，有用到javacsript和css語法，可前往自己整理的基礎語法頁面。</p>
<h1>基礎語法介紹</h1>
<p>介紹JavaScript和css的基本語法內容</p><h2>JavaScript基礎語法</h2>
<p>Q:什麼是JavaScript?</p>
<p>A:JavaScript是用來建立互動式網頁的程式設計語言，從重新整理社交媒體送到顯示動畫與互動式地圖，JavaScript 的功能可以提升使用者體驗。JavaScript 作為用戶端指令碼語言，是全球資訊網的核心技術之一。當瀏覽網際網路時，只要在網頁上看見浮動切換影像，一按即顯示的下拉式功能表，或是動態變更的元件色彩，這些都是 JavaScript 呈現的。</p>
<p>在JavaScript還未上市時，早期都是用html語法，製作出一個靜態網站，但無法讓網頁有更多變化，若想要更精緻，就需要用到Script語言。</p>
<p>JavaScript前名是Live Script。</p>
<p><span style="background-color: #ffff00;">很多人搞錯的觀念:Java和JavaScript程式是完全不同的東西。</span></p>
<p>如何撰寫基本的JavaScript?</p>
<p>JavaScript最常使用在網頁上，所以所有的瀏覽器都可以來執行JavaScript程式，我們可以做一個簡單的練習，例如hello.html，代碼如下</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="content-type" content="text/html;
 charset=utf-8"&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Hello World!&lt;/title&gt;
    &lt;script&gt;
      document.write('Hello world!');
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
<p>document.write表示寫入資料夾到文件中(因為當前文件尚未關閉，所以會寫到文件未端，而瀏覽器會自動寫到&lt;body&gt;尾端，但如果沒有建立&lt;body&gt;，則會在建立後跑到&lt;body&gt;的開始處)，接著利用瀏覽器開啟網頁檔，就可以看到程式的結果。</p>
<p>如何在html中加入JavaScript?</p>
<p>第一種方法:如上面的範例，在html中直接使用&lt;script&gt;...&lt;/script&gt;的標籤來表示嵌入一段JavaScript程式，而嵌入的位置可以在&lt;head&gt;和&lt;body&gt;之中的任意位置(不建議放在&lt;head&gt;最前面，因為&lt;head&gt;第一個節點通常為編碼宣告)。</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;html&gt;
&lt;body&gt;
&lt;script type="text/javascript"&gt;
var x =6, y=8;
var s = "Hello! "

t = s + x;
z = x * y;

document.write("&lt;pre&gt;x="+x+"\ny="+y+"\ns="+s+"\nt="+t+"\nz="+z+"&lt;/pre&gt;");
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>結果為:x=6 y=8 s=Hello! 6 z=48</p>
<p>第二種方法:是將JavaScript程式獨立寫成別的檔案，不直接和html檔案寫在一起，JavaScript的檔案副檔名為js檔，例如建立一個hello.js檔，裡面寫入:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">document.write(‘Hello world!’);</pre>
<p>然後html檔案則改為:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
  &lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="content-type" content="text/html;
 charset=utf-8"&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Hello World!&lt;/title&gt;
    &lt;script src="hello.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
<p>如上所示，在&lt;script&gt;中使用src的屬性指出外部js的位址</p>
<p><span style="background-color: #ffff00;">註解</span></p>
<p>註解部分不會執行，是給人看的，JavaScript中有兩種註解方式:</p>
<p>1.//單行註解:兩個斜線後面的部分將不會處理。</p>
<p>2./*...*/多行註解:註解中間的部分將不會處理。</p>
<p></p>
<p>分號結尾</p>
<p>一般程式語言，每段程式結尾都是以分號表示，但JavaScript能夠自動幫你在位加上分號的結尾加上分號，JavaScript容許這樣的錯誤發生，但有時候JavaScript會誤解你的意思而造成錯誤。</p>
<p>基本語法範例</p>
<p>1.運算式</p>
<p>2.分支</p>
<p>3.迴圈</p>
<p>4.函數</p>
<p>5.陣列</p>
<p>運算式範例</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;html&gt;
&lt;body&gt;
&lt;script type="text/javascript"&gt;
var x =6, y=8;
var s = "Hello! "

t = s + x;
z = x * y;

document.write("&lt;pre&gt;x="+x+"\ny="+y+"\ns="+s+"\nt="+t+"\nz="+z+"&lt;/pre&gt;");
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>執行結果 x=6 y=8 s=Hello! t=Hello! 6 z=48</p>
<p>分支範例</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;html&gt;
&lt;body&gt;
&lt;script type="text/javascript"&gt;
var score = 70;
if (score &gt;= 60)
  document.write("及格");
else
  document.write("不及格");
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>執行結果:及格</p>
<p>迴圈範例</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;html&gt;
&lt;body&gt;
&lt;script type="text/javascript"&gt;
for (i=1;i&lt;=10;i++) {
  if (i == 3) continue;
  if (i == 8) break;
  document.write("i="+i+"&lt;BR/&gt;");
}
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>執行結果:</p>
<p>i=1 i=2 i=4 i=5 i=6 i=7</p>
<p>函數範例</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;html&gt;
&lt;body&gt;

&lt;script type="text/javascript"&gt;
var add = function(a,b) {     // 第一種寫法，將匿名函數指定給變數。
  return a+b;
}

function sub(a,b) {            // 第二種寫法，直接宣告函數，該函式是一個函數物件，
  return a-b;
}

document.write("add(3,5)="+add(3,5)+" sub(7,2)="+sub(7,2));
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;</pre>
<p>執行結果 add(3,5)=8 sub(7,2)=5</p>
<p>陣列範例</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;html&gt;
&lt;body&gt;
&lt;script type="text/javascript"&gt;
var x;
var friends = new Array();
friends[0] = "John";
friends[1] = "Mary";
friends[2] = "George";
for (p in friends) {
  document.write(p + ":"+ friends[p] + "&lt;br /&gt;");
}
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>執行結果 0:John 1:Mary 2:George</p>
<h2>CSS基本語法</h2>
<p>Q:CSS是什麼?</p>
<p>A:是一個階層式樣式表(英語：<span lang="en">Cascading Style Sheets)，是一種用來為結構化文件添加樣式的電腦語言。</span></p>
<p><span lang="en">CSS可以靜態地修飾網頁，能夠對網頁中的元素位置的排版進行像素級精確控制，支援幾乎所有的字型字號樣式，擁有對網頁對象和模型樣式編輯的能力。但CSS不能單獨使用，必須與html一起協同工作，CSS可以用於設定頁面布局、設定頁面元素樣式、設定適用於所有網頁的全域樣式。</span></p><h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>