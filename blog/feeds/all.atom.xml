<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-16T19:14:00+08:00</updated><entry><title>wcm2024 w9上課內容</title><link href="./2024-w9-blog-course.html" rel="alternate"></link><published>2024-06-16T19:14:00+08:00</published><updated>2024-06-16T11:15:57+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-16:./2024-w9-blog-course.html</id><summary type="html">&lt;p&gt;wcm2024 w9上課內容&lt;/p&gt;
</summary><content type="html">&lt;p&gt;wcm2024 w9上課內容&lt;/p&gt;


&lt;h1&gt;相關內容&lt;/h1&gt;
&lt;p&gt;本門課的目的：利用網頁來管理與個人或專業領域應用相關的內容&lt;/p&gt;
&lt;p&gt;網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲中，只要有能夠執行 Python 的雲端或近端環境，開啟網頁編輯程式進行改版，上傳資料可在 Github 倉儲中透過 Pages 的全球資訊伺服器呈現網站內容。&lt;/p&gt;
&lt;p&gt;本課管理系統採用 Python Flask 編寫，超文件的以 H 標註進行分頁外，還有elican 與 Reveal.js 等兩個延伸套件&lt;/p&gt;
&lt;p&gt;Pelican 可用來建立網誌， Reveal.js 則可用來建立網頁上的簡報資料。&lt;/p&gt;</content><category term="wcm2024 w9上課內容"></category><category term="wcm2024 w9上課內容"></category></entry><entry><title>wcm2024 分組專案</title><link href="./2024-teams-blog-course.html" rel="alternate"></link><published>2024-06-14T12:53:00+08:00</published><updated>2024-06-16T11:10:46+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-teams-blog-course.html</id><summary type="html">&lt;p&gt;網際內容管理課程分組專案 - 網頁與 Brython 程式應用&lt;/p&gt;
</summary><content type="html">&lt;p&gt;網際內容管理課程分組專案 - 網頁與 Brython 程式應用&lt;/p&gt;


&lt;h1&gt;分組專案&lt;/h1&gt;
&lt;p&gt;1a stud倉儲: https://github.com/mdewcm2024/1astud-site&lt;/p&gt;
&lt;h1&gt;網頁式內容管理&lt;/h1&gt;
&lt;p&gt;建立自己倉儲帳號，首先本門課有事先準備好一個範例的倉儲網頁框架，只要至那他上註冊好的個人帳號網址，save後就能克隆該網站，可以選擇是要使用replit或是使用倉儲本身新更新的 codespaces 這兩個或其他軟體進行維護網站&lt;/p&gt;
&lt;h1&gt;章節式標題&lt;/h1&gt;
&lt;p&gt;一般在啟動動態編輯網站後就能在上方工具欄中，選擇想要的格式，或到程式編輯，輸入# 為大標題 ## 為小標題，記得需要空格否則將被視為一般字體大小。&lt;/p&gt;
&lt;h1&gt;Python 程式系統&lt;/h1&gt;
&lt;p&gt;學習議題: 如何利用電腦輔助設計室的舊 Python 建立新的可攜環境?&lt;/p&gt;
&lt;p&gt;1.確認原始Python環境&lt;/p&gt;
&lt;p&gt;2.安裝 Python 和 Virtualenv&lt;/p&gt;
&lt;p&gt;3.創建新的虛擬環境&lt;/p&gt;
&lt;p&gt;4.啟動虛擬環境&lt;/p&gt;
&lt;p&gt;5.安裝依賴庫&lt;/p&gt;
&lt;p&gt;6.確認安裝&lt;/p&gt;
&lt;p&gt;7.可攜環境打包&lt;/p&gt;
&lt;p&gt;在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域?&lt;/p&gt;
&lt;p&gt;1.Web 開發&lt;/p&gt;
&lt;p&gt;後端開發：使用 Python（例如 Flask 或 Django 框架）來處理伺服器邏輯，數據庫交互，以及 API 開發。&lt;/p&gt;
&lt;p&gt;前端與後端整合：使用 JavaScript 和 HTML 來建立前端界面，然後透過 AJAX 或 Fetch API 與後端的 Python 服務器進行通信，實現動態數據加載和交互。&lt;/p&gt;
&lt;p&gt;2.數據可視化&lt;/p&gt;
&lt;p&gt;動態數據展示：使用 Python 的數據處理能力（例如 Pandas 和 Matplotlib），結合 JavaScript 的圖表庫（例如 D3.js 或 Chart.js），將處理好的數據以圖表形式動態展示在網頁中。&lt;/p&gt;
&lt;p&gt;儀表板：利用 Dash（基於 Flask 和 Plotly）創建交互式儀表板，這些儀表板可以嵌入到網頁中，展示實時數據。&lt;/p&gt;
&lt;p&gt;3.機器學習與人工智慧&lt;/p&gt;
&lt;p&gt;預測模型展示：將 Python 訓練的機器學習模型嵌入到網頁應用中，並使用 JavaScript 來實現交互式預測輸入和結果展示。&lt;/p&gt;
&lt;p&gt;AI 驅動的應用：例如聊天機器人、推薦系統等，前端使用 JavaScript 進行交互，後端使用 Python 處理 AI 邏輯。&lt;/p&gt;
&lt;p&gt;4.Web 爬蟲與數據收集&lt;/p&gt;
&lt;p&gt;數據展示：使用 Python 爬蟲收集數據，然後將這些數據展示在網頁上，並結合 JavaScript 進行動態更新和視覺化。&lt;/p&gt;
&lt;p&gt;用戶交互：用戶可以通過網頁界面提供關鍵字或 URL，後端使用 Python 爬蟲實時收集數據並返回展示結果。&lt;/p&gt;
&lt;p&gt;5.自動化任務&lt;/p&gt;
&lt;p&gt;網頁表單填寫：使用 Python 腳本自動填寫和提交網頁表單，結合 JavaScript 進行結果處理和展示。&lt;/p&gt;
&lt;p&gt;資料收集和報告生成：使用 Python 自動生成報告並通過網頁展示，使用 JavaScript 進行交互和下載。&lt;/p&gt;
&lt;p&gt;6.教育與培訓&lt;/p&gt;
&lt;p&gt;互動教學工具：結合 Python 和 JavaScript 開發互動編程教學工具，讓學生在網頁中即時編寫和運行 Python 代碼。&lt;/p&gt;
&lt;p&gt;在線實驗平台：建立在線實驗平台，讓用戶通過網頁界面進行數據輸入，後端 Python 處理並返回結果，前端 JavaScript 展示結果。&lt;/p&gt;
&lt;p&gt;7.電子商務&lt;/p&gt;
&lt;p&gt;動態推薦系統：利用 Python 的數據分析和機器學習能力，結合 JavaScript 實時向用戶推薦產品。&lt;/p&gt;
&lt;p&gt;後台管理系統：使用 Python 開發後端系統，管理產品、訂單和用戶，前端用 JavaScript 和 HTML 創建交互界面。&lt;/p&gt;
&lt;p&gt;(精密)機械設計流程?&lt;/p&gt;
&lt;p&gt;1.需求分析&lt;/p&gt;
&lt;p&gt;確定設計需求：與客戶或內部團隊討論，明確產品功能、性能要求、成本限制和時間表。&lt;/p&gt;
&lt;p&gt;技術規格：列出詳細的技術規格，包括尺寸、精度、材料、環境條件等。&lt;/p&gt;
&lt;p&gt;2.概念設計&lt;/p&gt;
&lt;p&gt;頭腦風暴：創造性思考，產生多種設計概念。&lt;/p&gt;
&lt;p&gt;初步草圖：繪製簡單的設計草圖，展示不同的設計方案。&lt;/p&gt;
&lt;p&gt;可行性研究：評估每個設計概念的可行性，包括技術、經濟和時間方面的考慮。&lt;/p&gt;
&lt;p&gt;3.詳細設計&lt;/p&gt;
&lt;p&gt;3D 建模：使用 CAD 軟件（如 SolidWorks、AutoCAD）創建精確的三維模型。&lt;/p&gt;
&lt;p&gt;材料選擇：根據設計需求選擇適合的材料。&lt;/p&gt;
&lt;p&gt;工程分析：進行有限元分析（FEA）和計算流體動力學（CFD）等模擬，確保設計的強度和性能滿足要求。&lt;/p&gt;
&lt;p&gt;4.設計驗證&lt;/p&gt;
&lt;p&gt;5.製造準備&lt;/p&gt;
&lt;p&gt;6.製造與裝配&lt;/p&gt;
&lt;p&gt;7.最終測試與驗證&lt;/p&gt;
&lt;p&gt;8.文件編制&lt;/p&gt;
&lt;p&gt;9.生產和市場推廣&lt;/p&gt;
&lt;p&gt;10.售後服務與反饋&lt;/p&gt;
&lt;p&gt;設計運算?&lt;/p&gt;
&lt;p&gt;1.需求分析與初步運算&lt;/p&gt;
&lt;p&gt;2.材料選擇與特性計算&lt;/p&gt;
&lt;p&gt;3.結構與強度計算&lt;/p&gt;
&lt;p&gt;4.運動學與動力學計算&lt;/p&gt;
&lt;p&gt;5.熱分析與散熱設計&lt;/p&gt;
&lt;p&gt;6.摩擦與磨損計算&lt;/p&gt;
&lt;p&gt;7.振動與聲學分析&lt;/p&gt;
&lt;p&gt;8.流體動力學計算&lt;/p&gt;
&lt;p&gt;9.成本分析與優化&lt;/p&gt;
&lt;p&gt;10.安全性與可靠性計算&lt;/p&gt;
&lt;p&gt;特定系統模擬?&lt;/p&gt;
&lt;p&gt;1.有限元分析: 軟件:ANSYS、Abaqus、SolidWorks Simulation&lt;/p&gt;
&lt;p&gt;2.計算流體動力學: 軟件:ANSYS Fluent、OpenFOAM&lt;/p&gt;
&lt;p&gt;3.動力學與運動學模擬: 軟件:ATLAB/Simulink、ADAMS&lt;/p&gt;
&lt;p&gt;4.熱模擬: 軟件:ANSYS、COMSOL Multiphysics&lt;/p&gt;
&lt;p&gt;5.電磁模擬: 軟件:ANSYS Maxwell、COMSOL Multiphysics&lt;/p&gt;
&lt;p&gt;6.聲學模擬: 軟件:COMSOL Multiphysics、ANSYS Sound&lt;/p&gt;
&lt;p&gt;7.機器學習與優化: 軟件:Python、MATLAB&lt;/p&gt;
&lt;p&gt;8.製造過程模擬: 軟件:Siemens NX CAM、Mastercam&lt;/p&gt;
&lt;p&gt;9.多物理場模擬: 軟件:COMSOL Multiphysics&lt;/p&gt;
&lt;p&gt;10.虛擬現實與增強現實（VR/AR）模擬: 軟件:Unity、Unreal Engine&lt;/p&gt;
&lt;h1&gt;AI 工具&lt;/h1&gt;
&lt;p&gt;ChatGPT 與 Gemini Pro 都可以直接利用 Gmail 帳號登入, 初級應用目前都可免費使用, 這兩個 AI 工具可以協助我們解決甚麼問題?&lt;/p&gt;
&lt;p&gt;ChatGPT: 是一個對話式人工智能模型，它可以理解和生成自然語言文本。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;回答問題：ChatGPT 可以回答關於各種主題的問題，提供信息和解釋。&lt;/p&gt;
&lt;p&gt;提供建議：ChatGPT 可以提供建議和指導，例如在技術、創意或生活方面。&lt;/p&gt;
&lt;p&gt;訓練對話：ChatGPT 可以用於訓練對話模型，例如客服機器人或虛擬助手。&lt;/p&gt;
&lt;p&gt;創作文本：ChatGPT 可以生成各種類型的文本，包括故事、文章和詩歌。&lt;/p&gt;
&lt;p&gt;Gemini Pro 是一個自然語言處理工具，它提供了多種功能，可以解決各種問題，例如：&lt;/p&gt;
&lt;p&gt;文本分析：Gemini Pro 可以分析文本，提取關鍵信息，並進行情感分析、主題分類等任務。&lt;/p&gt;
&lt;p&gt;信息檢索：Gemini Pro 可以通過文本搜索引擎來檢索相關信息，幫助你找到所需的內容。&lt;/p&gt;
&lt;p&gt;自然語言生成：Gemini Pro 可以生成自然語言文本，例如摘要、說明或報告。&lt;/p&gt;
&lt;p&gt;為什麼有這些工具驚為天人?&lt;/p&gt;
&lt;p&gt;這些工具驚艷人心的原因在於它們的創新性、功能性和應用廣泛性。&lt;/p&gt;
&lt;p&gt;1.智能化和自動化&lt;/p&gt;
&lt;p&gt;2.便捷性和可用性&lt;/p&gt;
&lt;p&gt;3.多功能性&lt;/p&gt;
&lt;p&gt;4.創新性和前瞻性&lt;/p&gt;
&lt;p&gt;有人卻覺得還好而已, 並無法從中挖出甚麼資料?&lt;/p&gt;
&lt;p&gt;在別人眼中可能只是一項交作業的工具而已，但在我自己眼中是一款非常大的發明，了解自己所未知的世界，去探討增加自己的不足能力，來提升自己的未來優勢。&lt;/p&gt;
&lt;p&gt;學習議題: AI 工具曾經協助我們解決甚麼問題?&lt;/p&gt;
&lt;p&gt;AI幫我們解決過程式和課業問題，AI也可以幫我們規劃旅遊計畫表等等。&lt;/p&gt;</content><category term="wcm2024 分組專案"></category><category term="wcm2024 分組專案"></category></entry><entry><title>wcm2024 期中課程整理</title><link href="./2024-w8-blog-course.html" rel="alternate"></link><published>2024-06-14T11:50:00+08:00</published><updated>2024-06-14T04:46:06+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-w8-blog-course.html</id><summary type="html">&lt;p&gt;網際內容管理課程的英文名稱為 Web-based Content Management, 課程目標是讓學員得以運用網頁來管理與個人或專業領域應用相關的內容. 當然, 我們還想啟發學員對於網頁與內容管理發展趨勢的思考, 並且針對學員選課, 評定出一個合理的修課成績!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;網際內容管理課程的英文名稱為 Web-based Content Management, 課程目標是讓學員得以運用網頁來管理與個人或專業領域應用相關的內容. 當然, 我們還想啟發學員對於網頁與內容管理發展趨勢的思考, 並且針對學員選課, 評定出一個合理的修課成績!&lt;/p&gt;


&lt;p&gt;期中內容整理可以到&lt;a href="https://41223136.github.io/wcm2024/content/%E6%9C%9F%E4%B8%AD%E8%AA%B2%E7%A8%8B%E6%95%B4%E7%90%86.html"&gt;這邊&lt;/a&gt;去觀看介紹&lt;/p&gt;</content><category term="wcm2024 期中課程整理"></category><category term="wcm2024 期中課程整理"></category></entry><entry><title>2024 w7~w8 課程</title><link href="./2024-w7~w8-blog-course.html" rel="alternate"></link><published>2024-06-14T11:08:00+08:00</published><updated>2024-06-14T04:42:44+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-w7~w8-blog-course.html</id><summary type="html">&lt;p&gt;第七、八週課程, 從教育的本質看網際內容管理課程的內容要點,從教育的本質看課程內容,其中登記成績,並輸入自己的理想成績&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第七、八週課程, 從教育的本質看網際內容管理課程的內容要點,從教育的本質看課程內容,其中登記成績,並輸入自己的理想成績&lt;/p&gt;


&lt;h1&gt;第七週上課&lt;/h1&gt;
&lt;p&gt;輸入自己其中的理想成績&lt;/p&gt;
&lt;h1&gt;第八週上課&lt;/h1&gt;
&lt;p&gt;教育本質&lt;/p&gt;
&lt;iframe width="1130" height="650" src="https://www.youtube.com/embed/zmKrkX8Z8UQ?si=GW0YhaUVSg94G8oc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="w7~w8"></category><category term="w7~w8上課內容"></category></entry><entry><title>2024 w6 課程</title><link href="./2024-w6-blog-course.html" rel="alternate"></link><published>2024-06-14T00:38:00+08:00</published><updated>2024-06-14T04:42:44+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-w6-blog-course.html</id><summary type="html">&lt;p&gt;第六週課程, 如何透過與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第六週課程, 如何透過與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法.&lt;/p&gt;


&lt;h1&gt;git的使用、發展歷史、如何解決問題?&lt;/h1&gt;
&lt;p&gt;將下面題目解答並放入自己的網站上,&lt;a href="https://41223136.github.io/wcm2024/content/w6.html"&gt;第六週連結&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.根據您的專業, 就 git 的使用, 從與 ChatGPT 的對話, 將內容整理到個人的第六網誌, 其中包含: git 的發展歷史, 創作人的相關履歷, 以及一般相同專業人士如何利用  git 解決內容管理問題?&lt;/p&gt;
&lt;p&gt;2.假如要在 Windows 實際 demo git client 與 git server, 該如何進行? 請將相關操作流程整理至個人第六週網誌中.&lt;/p&gt;</content><category term="w6"></category><category term="w6上課內容"></category></entry><entry><title>2024 w5 課程</title><link href="./2024-w5-blog-course.html" rel="alternate"></link><published>2024-06-13T23:32:00+08:00</published><updated>2024-06-14T04:42:44+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-13:./2024-w5-blog-course.html</id><summary type="html">&lt;p&gt;wcm2024 第五週上課內容,以iframe嵌入先前學的教學影片,並摘要個影片內容&lt;/p&gt;
</summary><content type="html">&lt;p&gt;wcm2024 第五週上課內容,以iframe嵌入先前學的教學影片,並摘要個影片內容&lt;/p&gt;


&lt;h1&gt;將組員的個人倉儲納為分組倉儲的子模組&lt;/h1&gt;
&lt;p&gt;可以先
git status&lt;/p&gt;
&lt;p&gt;git submodule add (貼上自己的倉儲網站).git (輸入自己的學號)&lt;/p&gt;
&lt;p&gt;git add .&lt;/p&gt;
&lt;p&gt;git commit -m "上傳子模組"&lt;/p&gt;
&lt;p&gt;git push&lt;/p&gt;
&lt;h1&gt;教學影片&lt;/h1&gt;
&lt;p&gt;將組員的個人倉儲納為分組倉儲的子模組.mp4(影片為老師的)&lt;/p&gt;
&lt;iframe width="1120" height="560" src="https://www.youtube.com/embed/uzN2sMKCO3E?si=dkXiKysfCabfyFqq" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="w5"></category><category term="w5上課內容"></category></entry><entry><title>2024 w4 課程</title><link href="./2024-w4-blog-course.html" rel="alternate"></link><published>2024-06-13T23:12:00+08:00</published><updated>2024-06-14T04:42:44+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-13:./2024-w4-blog-course.html</id><summary type="html">&lt;p&gt;wcm2024 第四週上課內容&lt;/p&gt;
</summary><content type="html">&lt;p&gt;wcm2024 第四週上課內容&lt;/p&gt;


&lt;h1&gt;有關建立網站&lt;/h1&gt;
&lt;p&gt;網際內容管理的網際指的並非網際網路的 Internet, 而是指 Web-based, 也就是針對網頁瀏覽器檢視的內容加以管理&lt;/p&gt;
&lt;p&gt;希望所管理的網站內容, 從無到有的過程留下改版歷程, 因此使用分散式版次管理系統進行網頁的配置, 也就是利用 Github 所提供的 Pages 功能來建立網頁&lt;/p&gt;
&lt;h1&gt;Replit靜態網站檢視&lt;/h1&gt;
&lt;p&gt;下載 &lt;a href="https://mde.tw/wcm2024/downloads/main2.txt"&gt;main2.txt&lt;/a&gt; 與 &lt;a href="https://mde.tw/wcm2024/downloads/static.txt"&gt;static.txt&lt;/a&gt;, (老師的網誌裡面有txt碼)其中包含 main2.py 與 static.py, 只要在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視. 另一方面, 若要取消先前執行 python3 main2.py, 只需要在 Shell 頁面按下 ctrl + c, c 代表 cancle 也就是取消. 然後若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵&lt;/p&gt;
&lt;h1&gt;LaTeX&lt;/h1&gt;
&lt;p&gt;建立各組期中與期末報告&lt;/p&gt;</content><category term="w4"></category><category term="w4上課內容"></category></entry><entry><title>2024 w3 課程</title><link href="./2024-w3-blog-course.html" rel="alternate"></link><published>2024-06-13T00:12:00+08:00</published><updated>2024-06-14T04:42:44+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-13:./2024-w3-blog-course.html</id><summary type="html">&lt;p&gt;wcm2024 第三週上課內容&lt;/p&gt;
</summary><content type="html">&lt;p&gt;wcm2024 第三週上課內容&lt;/p&gt;


&lt;h1&gt;介紹Git的指令&lt;/h1&gt;
&lt;p&gt;可以至&lt;a href="https://41223136.github.io/wcm2024/content/git%20order.html"&gt;Git的指令&lt;/a&gt;了解指令的用法,並查看自己需要什麼&lt;/p&gt;
&lt;h1&gt;利用Gitpod和localhost維護倉儲&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.gitpod.io/"&gt;Gitpod&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;利用 Github Classroom 分組&lt;/h1&gt;
&lt;p&gt;取得 mdewcm2024 帳號下的 1a-ag1 倉儲, 所有第一組的組員均對此分組倉儲有管理權, 可以使用登入 Github 的帳號權限進行改版
由於在 Replit 免費帳號下, 僅能與登入 Github 的帳號進行授權, 且在 Replit 導入的倉儲, 任何人都能夠取得倉儲下 .git 的所有資料, 因此無法利用組員的 Github 帳號 token 取得管理授權, 而必須動態在 /home/runner/.ssh 下建立 id_rsa 與 config 連線設定, 各組組員才能利用 Replit 管理分組網站內容&lt;/p&gt;
&lt;h1&gt;git 指令&lt;/h1&gt;
&lt;p&gt;git 的新增、提交與推送指令:&lt;/p&gt;
&lt;p&gt;git add . git commit -m "說明字串" git push&lt;/p&gt;
&lt;p&gt;使用 git add . 表示要認列所進行的全部改版內容, git commit -m 執行之前, 若在近端使用, 必須先行設定 git config, 將 home_ipv6 目錄下的 .gitconfig 中明確列出改版者的身分, 其中包括:&lt;/p&gt;
&lt;p&gt;git config --global user.name "提交者的 github 帳號名稱"&lt;/p&gt;
&lt;p&gt;git config --global user.email "提交者在 github 所登錄的 email address"&lt;/p&gt;
&lt;p&gt;使用者也可以利用 git version 查詢目前所使用的 git 版本.&lt;/p&gt;
&lt;p&gt;git status 通常用來查核目前近端的改版狀況, 例如: 是否與遠端倉儲同步, 或者遠端倉儲已經有了新版本.&lt;/p&gt;
&lt;p&gt;若遠端倉儲已經有新的版本, 則在 git push 之前, 必須設法取下遠端資料進行合併後, 才能再提交新的版本並推送到遠端.&lt;/p&gt;
&lt;p&gt;git pull = git fetch + git merge&lt;/p&gt;
&lt;p&gt;由於要將各組員的 wcm2024 設定為各分組倉儲的子模組, 因此必須利用 git submodule add 以各組員的學號作為子目錄名稱, 利用下列指令, 將組員倉儲新增為分組倉儲的子模組:&lt;/p&gt;
&lt;p&gt;git submodule add 倉儲網址 子目錄&lt;/p&gt;
&lt;p&gt;若只要取下倉儲的主要內容, 可以使用下列指令:&lt;/p&gt;
&lt;p&gt;git clone 倉儲網址_協定.git 指定目錄與否&lt;/p&gt;
&lt;p&gt;若要取下帶有子模組的倉儲, 且可能該子模組還有設定其他子模組, 則必須要加上 --recurse-submodules:
git log (檢視 Git 紀錄 Q鍵離開)&lt;/p&gt;
&lt;p&gt;ls -l (瀏覽)&lt;/p&gt;
&lt;p&gt;pwd (列出現在工作目錄)&lt;/p&gt;
&lt;p&gt;acp ("輸入" 直接上傳)&lt;/p&gt;
&lt;p&gt;dns (將英文名稱轉為數字IP 問server(伺服器)IP地址 DNS會先查詢自己資料庫)&lt;/p&gt;
&lt;p&gt;dir (顯示某個磁碟指定目錄下的全部或部分檔案目錄和子目錄)&lt;/p&gt;
&lt;p&gt;./b(代表執行、運行)(執行可執行檔)&lt;/p&gt;
&lt;h1&gt;利用Gitpod維護倉儲&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.gitpod.io/"&gt;https://www.gitpod.io/&lt;/a&gt; - gitpod的使用與 Codespaces 類似,每個月有 50 小時的免費使用時間, 可以使用 Github 帳號登入&lt;/p&gt;
&lt;h1&gt;利用 localhost 維護倉儲&lt;/h1&gt;
&lt;p&gt;透過 Windows 環境中的 USB 隨身碟, 配置可攜程式系統, 用來管理個人與分組的分組倉儲與網站, 可使用老師給的portable_2024.7z(密碼為:kmolab)&lt;/p&gt;
&lt;h1&gt;Wink和Sharex使用教學&lt;/h1&gt;
&lt;p&gt;Sharex 可用於電腦畫面截圖, 也可以錄製電腦連續操作影片, 而 Wink 則可取電腦操作過程的關鍵影格, 可加上文字說明標籤&lt;/p&gt;</content><category term="w3"></category><category term="w3上課內容"></category></entry><entry><title>2024 w2 課程</title><link href="./2024-w2-blog-course.html" rel="alternate"></link><published>2024-06-11T23:51:00+08:00</published><updated>2024-06-14T04:42:44+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-11:./2024-w2-blog-course.html</id><summary type="html">&lt;p&gt;wcm2024 第二週上課內容&lt;/p&gt;
</summary><content type="html">&lt;p&gt;wcm2024 第二週上課內容&lt;/p&gt;


&lt;h1&gt;介紹各個應用程式&lt;/h1&gt;
&lt;p&gt;使用者可以使用Replit如何使用Codespace、Gitpod&lt;/p&gt;
&lt;h1&gt;如何使用Codespaces維護自己倉儲?&lt;/h1&gt;
&lt;p&gt;可使用init_replit指令安裝Python模組
chmod u+x init_replit&lt;/p&gt;
&lt;p&gt;./init_replit&lt;/p&gt;
&lt;p&gt;接著輸入(這是動態網站)&lt;/p&gt;
&lt;p&gt;python3 main.py&lt;/p&gt;
&lt;p&gt;再開啟新的終端機&lt;/p&gt;
&lt;p&gt;python3 -m http.server&lt;/p&gt;
&lt;p&gt;這是靜態網站&lt;/p&gt;
&lt;p&gt;即可編輯網站&lt;/p&gt;
&lt;h1&gt;利用Github Classroom建立分組網站&lt;/h1&gt;
&lt;p&gt;在 mdewcm2024 帳號下, 期中分組作業名稱為 1a, 第一組組長建立 ag1, 則分組倉儲名稱將為 1a-ag1, 而且各分組 Team 名稱不能相同&lt;/p&gt;</content><category term="w2"></category><category term="w2上課內容"></category></entry><entry><title>2024 w1 課程</title><link href="./2024-w1-blog-course.html" rel="alternate"></link><published>2024-06-11T22:21:00+08:00</published><updated>2024-06-14T04:42:44+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-11:./2024-w1-blog-course.html</id><summary type="html">&lt;p&gt;wcm2024 第一週上課內容&lt;/p&gt;
</summary><content type="html">&lt;p&gt;wcm2024 第一週上課內容&lt;/p&gt;


&lt;h1&gt;建立Github帳號&lt;/h1&gt;
&lt;p&gt;在Google搜尋Github並Sign up可用來建立並維護個人的課程倉儲與網站&lt;/p&gt;
&lt;h1&gt;建立個人課程網站&lt;/h1&gt;
&lt;p&gt;請至 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲,以此倉儲作為Template
建立個人的wcm2024倉儲,並設定個人的Github Pages課程網頁&lt;/p&gt;</content><category term="w1"></category><category term="w1上課內容"></category></entry><entry><title>2024 Spring 課程</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-14T04:42:44+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry></feed>